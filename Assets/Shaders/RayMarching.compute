#pragma kernel CSMain

#define MAX_STEPS 100
#define SURFACE_DIST .01
#define MAX_DIST 100.

RWTexture2D<float4> Result;
float _Time;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float smoother;
float3 colorA;
float3 colorB;
float stepDivider;
float stepOffset;

StructuredBuffer<float3> _DirectionalLights;

struct Sphere {
    float3 position;
    float radius;
};

StructuredBuffer<Sphere> _Spheres;

struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

float GetSphereDist(float3 p, Sphere sphere) {
    return length(p - sphere.position) - sphere.radius;
}

float SmoothMin(float dstA, float dstB, float k) {
    if (smoother > 0.01f) {
        float h = max(k - abs(dstA - dstB), 0) / k;
        return min(dstA, dstB) - h*h*h*h * k * 1 / 8.0f;
    }else
        return min(dstA, dstB);
}

float GetDist(float3 p) {
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    float distance = MAX_DIST;
    
    for (uint i = 0; i < numSpheres; i++)
        distance = SmoothMin(distance, GetSphereDist(p, _Spheres[i]), smoother);
    
    return distance;
}

float2 RayMarch(Ray ray) {
    float totalDistance = 0.0f;
    int stepCount;
    for (stepCount = 0; stepCount < MAX_STEPS; stepCount++) {
        float3 p = ray.origin + totalDistance * ray.direction;
        float newDist = GetDist(p);
        totalDistance += newDist;
        
        if (newDist < SURFACE_DIST || totalDistance > MAX_DIST)
            break;
    } 
    
    return float2(totalDistance, stepCount);
}

float3 GetNormal(float3 p) {
    float d = GetDist(p);
    float2 e = float2(.01, 0);
    
    float3 n = float3(
        d - GetDist(p - e.xyy),
        d - GetDist(p - e.yxy),
        d - GetDist(p - e.yyx)
    );
    
    return normalize(n);
}

float GetLight(float3 p, float3 light) {
    float3 lightNormal = -light;
    float3 n = GetNormal(p);
    
    float dif = saturate(dot(n * 0.5f + 0.5f, lightNormal));
    //float2 d = RayMarch(CreateRay(p + n * (SURFACE_DIST + 0.01f), lightNormal));
    //if (d.x < MAX_DIST) dif *= 0.1f;
    
    return dif;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint width, height;
    Result.GetDimensions(width, height);
    
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    
    Ray ray = CreateCameraRay(uv);
    float2 marchResult = RayMarch(ray);
    float d = marchResult.x;

    if (d < MAX_DIST) {    
        float3 p = ray.origin + ray.direction * d;
        
        uint numLights, stride;
        _DirectionalLights.GetDimensions(numLights, stride);
        
        float dif = 0.0f;
        for (uint i = 0; i < numLights; i++)
            dif += GetLight(p, _DirectionalLights[i]);
        
        float3 color1 = saturate(dif * colorA);
        float3 color2 = saturate((max(0, marchResult.y * marchResult.y - stepOffset)) / stepDivider * colorB);
        float3 col = saturate(color1 + color2);
    
        Result[id.xy] = float4(col, 1.0);
    }
}
